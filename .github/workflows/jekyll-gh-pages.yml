# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

                    - nom : Configuration de l'environnement Node.js
  utilisations : actions/setup-node@v4.0.3
  avec:
    # Définir always-auth dans npmrc.
    always-auth : # facultatif, la valeur par défaut est false
    # Version Spécification de la version à utiliser. Exemples : 12.x, 10.15.1, >=10.15.0.
    version-noeud : # facultatif
    # Fichier contenant la spécification de version de la version à utiliser. Exemples : package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # facultatif
    # Architecture cible à utiliser par Node. Exemples : x86, x64. L'architecture système sera utilisée par défaut.
    architecture : # optionnel
    # Définissez cette option si vous souhaitez que l'action vérifie la dernière version disponible qui satisfait à la spécification de version.
    check-latest: # facultatif
    # Registre facultatif à configurer pour l'authentification. Définira le registre dans un fichier .npmrc et .yarnrc au niveau du projet et configurera l'authentification pour lire à partir de env.NODE_AUTH_TOKEN.
    registre-url : # facultatif
    # Portée facultative pour l'authentification par rapport aux registres délimités. Reviendra au propriétaire du référentiel lors de l'utilisation du registre des packages GitHub (https://npm.pkg.github.com/).
    portée : # facultatif
    # Utilisé pour extraire les distributions de nœuds à partir des versions de nœuds. Puisqu'il existe une valeur par défaut, elle n'est généralement pas fournie par l'utilisateur. Lorsque vous exécutez cette action sur github.com, la valeur par défaut est suffisante. Lorsque vous exécutez sur GHES, vous pouvez transmettre un jeton d'accès personnel pour github.com si vous rencontrez une limitation de débit.
    jeton : # facultatif, la valeur par défaut est ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Utilisé pour spécifier un gestionnaire de paquets pour la mise en cache dans le répertoire par défaut. Valeurs prises en charge : npm, yarn, pnpm.
    cache : # facultatif
    # Utilisé pour spécifier le chemin vers un fichier de dépendances : package-lock.json, yarn.lock, etc. Prend en charge les caractères génériques ou une liste de noms de fichiers pour la mise en cache de plusieurs dépendances.
    cache-dependency-path: # facultatif
          
